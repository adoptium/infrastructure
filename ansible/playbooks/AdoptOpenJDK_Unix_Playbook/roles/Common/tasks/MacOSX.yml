---

#
# Updates all packages for macos-based distributions
#

# Issue https://github.com/adoptium/infrastructure/issues/1902
- name: Ensure ansible version is greater than 2.11
  fail:
    msg: "The version of Ansible you are using needs to be greater than 2.11"
  when: ansible_version.full is version('2.11', '<=')

- name: Get macOS version
  shell: sw_vers -productVersion
  register: macos_version
  changed_when: false

- name: Set macos version
  set_fact:
    macos_version_number: "{{ macos_version.stdout.split('.')[0] }}.{{ macos_version.stdout.split('.')[1] }}"

- name: Display macOS Version
  debug:
    var: macos_version_number

- name: Set homebrew path (x64)
  set_fact:
    homebrew_path: /usr/local/bin
  when: ansible_architecture == "x86_64"

- name: Set homebrew path (Arm64)
  set_fact:
    homebrew_path: /opt/homebrew/bin
  when: ansible_architecture == "arm64"

- name: Configure system-wide Bash profile
  become: true
  copy:
    src: files/macos/profile
    dest: /etc/profile
    owner: root
    group: wheel

- name: Ensure that directory for system-wide profile extensions is present
  become: true
  file:
    path: /etc/profile.d
    owner: root
    group: wheel
    state: directory

# Skipping linting as no situation where this can't run (lint error 301)
- name: Check for xcode-tools
  raw: xcode-select --print-path &> /dev/null
  register: xcode
  failed_when: false
  tags:
    - skip_ansible_lint

# Currently required to install packages. This can be removed once it installs on arm64
- name: Install Rosetta 2
  command: /usr/sbin/softwareupdate --install-rosetta --agree-to-license
  when:
    - ansible_architecture == "arm64"
  tags:
    - rosetta

- name: Check if Homebrew is already installed
  stat:
    path: "{{ homebrew_path }}/brew"
  register: brew

- name: Install Homebrew
  become: true
  become_user: "{{ ansible_user }}"
  script: scripts/install-homebrew.sh
  when: not brew.stat.exists

- name: Switch back to command line tools xcode before proceeding
  command: sudo xcode-select --switch /
  tags: adoptopenjdk

- name: Upgrade installed packages
  become: true
  become_user: "{{ ansible_user }}"
  homebrew:
    upgrade_all: yes
    path: "{{ homebrew_path }}"
  when: "macos_version_number is version('10.15', '>')"
  tags:
    - brew_upgrade

- name: Install brew cu
  become: true
  become_user: "{{ ansible_user }}"
  homebrew_tap:
    name: buo/cask-upgrade
    path: "{{ homebrew_path }}"
  tags:
    - brew_cu

# Skipping linting as no situation where this can't run (lint error 301)
- name: Update Casks
  become: true
  become_user: "{{ ansible_user }}"
  command: "{{ homebrew_path }}/brew cu -y"
  tags:
    - brew_cu
    - skip_ansible_lint

- name: Install Build Tool Packages
  become: true
  become_user: "{{ ansible_user }}"
  homebrew:
    name: "{{ item }}"
    state: present
    path: "{{ homebrew_path }}"
  with_items: "{{ Build_Tool_Packages }}"
  tags: build_tools

# Install CMAKE Where It Doesn't exist
- name: Check if cmake is installed in /opt/homebrew/bin
  stat:
    path: /opt/homebrew/bin/cmake
  register: cmake_homebrew

- name: Check if cmake is installed in /usr/local/bin
  stat:
    path: /usr/local/bin/cmake
  register: cmake_local

- name: Install Cmake
  become: true
  become_user: "{{ ansible_user }}"
  homebrew:
    name: "cmake"
    state: present
  tags: build_tools
  when: not (cmake_homebrew.stat.exists or cmake_local.stat.exists)

- name: Install Build Tool Packages NOT macOS 10.12
  become: true
  become_user: "{{ ansible_user }}"
  homebrew:
    name: "{{ item }}"
    state: present
    path: "{{ homebrew_path }}"
  with_items: "{{ Build_Tool_Packages_NOT_10_12 }}"
  when:
    - not (macos_version_number | regex_search("10.12"))
  tags: build_tools

- name: Install Build Tool Casks
  become: true
  become_user: "{{ ansible_user }}"
  homebrew_cask:
    name: "{{ item }}"
    state: present
    path: "{{ homebrew_path }}"
  with_items: "{{ Build_Tool_Casks }}"
  tags: build_tools

- name: Install Test Tool Packages
  become: true
  become_user: "{{ ansible_user }}"
  homebrew:
    name: "{{ item }}"
    state: present
    path: "{{ homebrew_path }}"
  with_items: "{{ Test_Tool_Packages }}"
  tags: test_tools

- name: Install JCK Tool Casks
  become: true
  become_user: "{{ ansible_user }}"
  homebrew_cask:
    name: "{{ item }}"
    state: present
    path: "{{ homebrew_path }}"
  with_items: "{{ JCK_Tool_Casks }}"
  tags: jck_tools

# Used for JCK printer tests
- name: Check if PDFwriter is installed
  stat:
    path: /Users/Shared/PDFwriter
  register: pdfwriter
  tags: jck_tools

- name: Download PDFwriter
  command: wget https://github.com/rodyager/RWTS-PDFwriter/releases/download/v1.0.1/RWTS-PDFwriter.pkg
  when: not pdfwriter.stat.exists
  tags: jck_tools

- name: Install PDFwriter
  command: installer -pkg ./RWTS-PDFwriter.pkg -target /
  when: not pdfwriter.stat.exists
  tags: jck_tools

# As per https://github.com/eclipse/openj9/issues/3790
- name: Creating /etc/sysctl.conf for kernel tunings
  file:
    path: /etc/sysctl.conf
    state: touch
    mode: 0644
    owner: root
    group: wheel
  tags:
    - kernel_tuning

- name: Writing kernel tuning parameters to /etc/sysctl.conf
  blockinfile:
    path: /etc/sysctl.conf
    block: |
      kern.sysv.shmmax=125839605760
      kern.sysv.shmall=30722560
  register: kernel
  tags:
    - kernel_tuning

- name: Allow staff users to generate core dumps
  file:
    path: /cores
    state: directory
    mode: 0774
    owner: root
    group: staff
  tags:
    - core_dumps

- name: Create limit.core.plist file in /Library/LaunchDaemons
  copy:
    dest: /Library/LaunchDaemons/limit.core.plist
    owner: root
    group: wheel
    mode: 0644
    content: |
      <?xml version="1.0" encoding="UTF-8"?> 
      <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" 
      "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
      <plist version="1.0"> 
      <dict>
      <key>Label</key>
      <string>limit.core</string>
      <key>ProgramArguments</key>
      <array>
      <string>launchctl</string>
      <string>limit</string>
      <string>core</string>
      <string>unlimited</string>
      <string>unlimited</string>
      </array>
      <key>RunAtLoad</key>
      <true/>
      <key>ServiceIPC</key>
      <false/>
      </dict>
      </plist>
  tags: kernel_tuning

- name: Load limit.core.plist file with launchctl
  command: sudo launchctl load -w /Library/LaunchDaemons/limit.core.plist
  register: core
  tags: kernel_tuning

# Skipping linting as not to introduce handlers into task-only playbooks (lint error 503)
- name: Reboot macOS after tweaking kernel tuning parameters
  reboot:
    reboot_timeout: 3600
  when: kernel.changed or core.changed
  tags:
    - kernel_tuning
    - skip_ansible_lint
