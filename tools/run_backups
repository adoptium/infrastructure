#!/bin/sh
set -x
cd /home/backups || exit 1
echo $(date +%T) : Starting backups of jenkins config.xml files ...
ssh jenkins@ci.adoptium.net 'ls -1 /home/jenkins/.jenkins/plugins/*.?pi | while read FILENAME; do basename $FILENAME ; unzip -p $FILENAME META-INF/MANIFEST.MF | sort -d | grep "Short-Name\|Long-Name\|Plugin-Version" ; echo --- ; done > /home/jenkins/.jenkins/pluginVersions.txt'
ssh jenkins@ci.adoptium.net 'find . \( -name config.xml -o -name pluginVersions.txt \) | grep -v config-history | tar czf - -T -' > jenkins/jenkins.$(date +%Y%m%d).tar.gz

#echo $(date +%T) : I would delete $(ls -1 jenkins/jenkins.*.gz | grep -v 20....01.tar.gz | head -n -3)
rm -v $(ls -1 jenkins/jenkins.*.gz | grep -v 20....01.tar.gz | head -n -3)
echo $(date +%T) : Backup up jenkins thin backup file if there has is one ...

LASTTHINBACKUP=$(ssh jenkins@ci.adoptium.net "cd /mnt/backup-server/jenkins_thinbackup && ls -rtd FULL* | tail -1")
LASTTHINBACKUPLOCALDATE=$(echo $LASTTHINBACKUP | cut -d- -f2- | cut -d_ -f1 | tr -d -)
if [ -z "$LASTTHINBACKUPLOCALDATE=" ]; then
  echo $(date +%T) :  FORMAT ERROR in last thin backup date - cannot take backup
else
  if [ ! -r jenkins/thinbackup.${LASTTHINBACKUPLOCALDATE}.tar.xz ]; then
    echo $(date +%T) : Backup up last full thinbackup from $LASTTHINBACKUP ...
    ssh jenkins@ci.adoptium.net tar cJf - -C /mnt/backup-server/jenkins_thinbackup $LASTTHINBACKUP > jenkins/thinbackup.${LASTTHINBACKUPLOCALDATE}.tar.xz
  else
    echo $(date +%T) : No new full thinbackup - skipping
  fi
fi
# rm -v $(ls -1 jenkins/thinbackup.*.xz | grep -v 20....01.tar.gz | head -n -3)

echo $(date +%T) : Backing up /usr/local/nagios ...
ssh nagios@nagios.adoptopenjdk.net tar czf - --exclude=nagiosgraph.log --exclude=archives /usr/local/nagios > nagios/nagios.$(date +%Y%m%d).tar.gz
#echo $(date +%T) : I would delete $(ls -1 nagios/nagios.*.gz | grep -v 20....01.tar.gz | head -n -3)
rm -v $(ls -1 nagios/nagios.*.gz | grep -v 20....01.tar.gz | head -n -3)

echo $(date +%T) : Backing up Bastillion-jetty directory ...
tar czf bastillion/bastillion.$(date +%Y%m%d).tar.gz -C /home/bastillion Bastillion-jetty
#echo $(date +%T) : I would delete $(ls -1 bastillion/bastillion.*.gz | grep -v 20....01.tar.gz | head -n -3)

# echo $(date +%T) : Backing up TRSS using mongodump ...
# ssh backups@54.78.186.5 mongodump --archive --db=exampleDb | xz > trss/trss.$(date +%Y%m%d).tar.xz
#echo $(date +%T) : I would delete $(ls -1 trss/trss.*.?z | grep -v 20....01.tar..z | head -n -3)
# rm -v $(ls -1 trss/trss.*.?z | grep -v 20....01.tar..z | head -n -3)
# Improved TRSS Backup Script, Daily Incremental Of Key Collections
# Weekly Full Backup On Sunday
# TRSS Restart Script Scheduled On TRSS @ 5am Sunday

echo "$(date +%T) : Starting TRSS backup with remote lock..."
TRSS_REMOTE_HOST="backups@20.90.182.165"
LOCKFILE="/tmp/trss-backup.lock"

# Check for existing lock

if ssh "$TRSS_REMOTE_HOST" "[ -f $LOCKFILE ]"; then
  echo "$(date +%T) : Remote backup lock already present, exiting..."
  exit 1
else
  echo "$(date +%T) : Lock acquired at $LOCKFILE"
  ssh "$TRSS_REMOTE_HOST" "touch $LOCKFILE"

  # Ensure remote lock is always removed on script exit or interruption
  cleanup() {
    echo "$(date +%T) : Cleaning up remote lock..."
    ssh "$TRSS_REMOTE_HOST" "rm -f $LOCKFILE"
  }
  trap cleanup EXIT INT TERM

  DOW=$(date +%w)  # 0 = Sunday

  if [ "$DOW" -eq 0 ]; then
    echo "$(date +%T) : Performing full weekly backup of TRSS..."
    ssh "$TRSS_REMOTE_HOST" docker exec aqa-test-tools-mongo-1 \
      mongodump --archive --db=exampleDb \
    | xz > trss/trss."$(date +%Y%m%d)".xz

    echo "$(date +%T) : Cleaning up old full backups (keeping last 4)..."
    FULL_BACKUPS=$(find trss -maxdepth 1 -name 'trss.[0-9]*.xz' | sort)
    FULL_COUNT=$(echo "$FULL_BACKUPS" | wc -l)
    if [ "$FULL_COUNT" -gt 4 ]; then
      echo "$FULL_BACKUPS" | head -n $(($FULL_COUNT - 4)) | xargs -r rm -v
    fi
  else
    LAST_SUNDAY=$(date -d last-sunday +%Y-%m-%dT00:00:00Z)
    echo "$(date +%T)" : Performing simulated daily incremental TRSS backup since $LAST_SUNDAY...

    for collection in ApplicationTests auditLogs testResults; do
      echo ""$(date +%T)" : Dumping updated documents from $collection..."
      ssh "$TRSS_REMOTE_HOST" docker exec aqa-test-tools-mongo-1 bash -c \
      "mongodump --db=exampleDb --collection=$collection \
       --query='{ \"timestamp\": { \"\$gte\": { \"\$date\": \"$LAST_SUNDAY\" } } }' \
       --archive --gzip" \
      > trss/trss.incr.${collection}."$(date +%Y%m%d)".archive.gz

      echo "$(date +%T) : Cleaning up old incremental backups for $collection (keeping last 7)..."
      INCR_BACKUPS=$(find trss -maxdepth 1 -name "trss.incr.${collection}.*.archive.xz" | sort)
      INCR_COUNT=$(echo "$INCR_BACKUPS" | wc -l)
      if [ "$INCR_COUNT" -gt 7 ]; then
        echo "$INCR_BACKUPS" | head -n $(($INCR_COUNT - 7)) | xargs -r rm -v
      fi
    done
  fi
  echo "$(date +%T)" : TRSS backup complete. Remote lock released..
fi

echo $(date +%T) : Backing up jenkins userContent via rsync
rsync -arv jenkins@ci.adoptium.net:userContent jenkins

echo $(date +%T) : All done
