---
########################################
# AdoptOpenJDK - Ansible Playbook for: #
#  ------------- Vagrant --------------#
########################################

- hosts: all
  gather_facts: yes
  remote_user: root
  become: yes

  tasks:
    - name: Vagrant playbook
      block:
        - name: Print facts
          debug:
            msg:
              - "inventory_hostname: {{ inventory_hostname | default('***Undefined***') }} "
              - "ansible_hostname: {{ ansible_hostname | default('***Undefined***') }}"
              - "ansible_fqdn: {{ ansible_fqdn | default('***Undefined***') }}"
              - "ansible_user: {{ ansible_user | default('***Undefined***') }}"
              - "ansible_default_ipv4.address: {{ ansible_default_ipv4.address | default('***Undefined***') }}"
              - "ansible_os_family: {{ ansible_os_family | default('***Undefined***') }} "
              - "ansible_distribution: {{ ansible_distribution | default('***Undefined***') }} "
              - "ansible_distribution_major_version: {{ ansible_distribution_major_version | default('***Undefined***') }} "
              - "ansible_architecture: {{ ansible_architecture | default('***Undefined***') }} "
              - "ansible_processor_vcpus: {{ ansible_processor_vcpus | default('***Undefined***') }} "
              - "ansible_processor_cores: {{ ansible_processor_cores | default('***Undefined***') }} "

        - name: Install pre-reqs
          apt:
            name: "{{ packages }}"
            update_cache: yes
          vars:
            packages:
              - software-properties-common
              - tree
              - zlib1g
              - zlib1g-dev
              - python-pip
              - python-dev
              - build-essential
              - gettext
              - libcurl4-openssl-dev
              - sshpass

        - name: Run apt-get upgrade
          apt: upgrade=safe

        - name: Pip install winrm modules
          pip:
            executable: /usr/bin/pip
            name: ["requests-credssp", "pywinrm"]

        - name: Create tmp folder if necessary
          file:
            path: /tmp
            state: directory

        - name: Create /usr/lib/jvm if necessary
          file:
            path: /usr/lib/jvm
            state: directory

      ##########
      # Java 8 #
      ##########

        - name: Check if jdk8 is already installed in the target location
          shell: ls -ld /usr/lib/jvm/jdk8* >/dev/null 2>&1
          failed_when: false
          register: adoptopenjdk_installed
          tags: java

        - name: Check if there is a default java
          shell: java -version >/dev/null 2>&1
          failed_when: false
          register: default_java
          tags: java

        - name: Install latest jdk8 release if not already installed
          unarchive:
            src: https://api.adoptopenjdk.net/v3/binary/latest/8/ga/linux/x64/jdk/hotspot/normal/adoptopenjdk?project=jdk
            dest: /usr/lib/jvm
            remote_src: yes
          when:
            - adoptopenjdk_installed.rc != 0
          tags: java

        # This is due to ansible not liking wildcard searches in the file module :(
        - name: Find jdk8 folder in /usr/lib/jvm
          find:
            paths: /usr/lib/jvm
            file_type: directory
            contains: jdk8u*
          register: jdk8_folder
          when: default_java.rc != 0
          tags: java
        # There should only be one jdk8u* folder in /usr/lib/jvm, hence 'files[0]'
        - name: Make jdk8 the default java
          file:
            src: "{{ jdk8_folder.files[0].path }}{{ item }}"
            dest: /usr{{ item }}
            state: link
          with_items:
            - /bin/java
            - /bin/javac
          when: default_java.rc != 0
          tags: java

      ###########
      # Ansible #
      ###########

        - name: Check if Ansible is installed
          shell: which ansible >/dev/null 2>&1
          failed_when: false
          register: ansible_installed
          tags: ansible

        - name: Add Ansible repository
          apt_repository:
            repo: ppa:ansible/ansible
          when: ansible_installed.rc != 0
          tags: ansible

        - name: Install Ansible
          apt:
            name: ansible
            update_cache: yes
          when: ansible_installed.rc != 0
          tags: ansible

      #######
      # Git #
      #######

        - name: Check if Git is installed
          shell: git --version >/dev/null 2>&1
          failed_when: false
          register: git_installed
          tags:
            - skip_ansible_lint
            - git

        - name: Test if Git is installed at the correct version
          shell: git --version | sed -e 's/git version //g' | awk -F'[.]' '{print $1 "." $2}'
          when: git_installed.rc == 0
          register: git_version
          tags:
            - skip_ansible_lint
            - git

        - name: Download Git Source
          get_url:
            url: https://www.kernel.org/pub/software/scm/git/git-2.15.0.tar.xz
            dest: /tmp/git-2.15.0.tar.xz
            mode: 0440
            checksum: sha256:107116489f10b758b51af1c5dbdb9a274917b0fb67dc8eaefcdabc7bc3eb3e6a
          when:
            - (git_installed.rc != 0 ) or (git_installed.rc == 0 and git_version.stdout is version_compare('2.15', operator='lt') )
          tags: git

        - name: Extract Git Source
          unarchive:
            src: /tmp/git-2.15.0.tar.xz
            dest: /tmp/
            copy: False
          when:
            - (git_installed.rc != 0 ) or (git_installed.rc == 0 and git_version.stdout is version_compare('2.15', operator='lt') )
          tags: git

        - name: Compile and Install Git from Source
          shell: cd /tmp/git-2.15.0 && ./configure --prefix=/usr/local --without-tcltk && make clean && make -j {{ ansible_processor_vcpus }} && sudo make install
          become: yes
          when:
            - (git_installed.rc != 0 ) or (git_installed.rc == 0 and git_version.stdout is version_compare('2.15', operator='lt') )
          tags: git

        - name: Remove system git if needed
          apt:
            name: git
            state: absent
          when:
            - (git_installed.rc == 0 and git_version.stdout is version_compare('2.15', operator='lt') )
          tags: git

        - name: Symlink git to /usr/bin/git
          file:
            src: /tmp/git-2.15.0/git
            dest: /usr/bin/git
            state: link
          when:
            - (git_installed.rc != 0 ) or (git_installed.rc == 0 and git_version.stdout is version_compare('2.15', operator='lt') )
          tags: git

      ###########
      # Vagrant #
      ###########

        - name: Check if Vagrant is installed
          shell: which vagrant >/dev/null 2>&1
          failed_when: false
          register: vagrant_installed
          tags: vagrant

        - name: Test if the Vagrant version is >2.1
          shell: vagrant --version | sed -e 's/Vagrant //g' | awk -F'[.]' '{print $1 "." $2 "." $3}'
          when: vagrant_installed.rc == 0
          register: vagrant_version
          tags: vagrant

        - name: Download Vagrant
          get_url:
            url: https://releases.hashicorp.com/vagrant/2.2.5/vagrant_2.2.5_x86_64.deb
            dest: /tmp/vagrant_2.2.5_x86_64.deb
            checksum: sha256:415f50b93235e761db284c761f6a8240a6ef6762ee3ec7ff869d2bccb1a1cdf7
          when:
            - (vagrant_installed.rc != 0) or (vagrant_installed.rc == 0 and vagrant_version.stdout is version_compare('2.2.5', operator='lt') )
          tags: vagrant

        - name: Remove system vagrant if necessary
          apt:
            name: vagrant
            state: absent
          when: (vagrant_installed.rc == 0 and vagrant_version.stdout is version_compare('2.2.5', operator='lt') )
          tags: vagrant

        - name: Install Vagrant
          command: dpkg -i /tmp/vagrant_2.2.5_x86_64.deb
          become: yes
          when:
            - (vagrant_installed.rc != 0) or (vagrant_installed.rc == 0 and vagrant_version.stdout is version_compare('2.2.5', operator='lt') )
          tags: vagrant

      ##############
      # VirtualBox #
      ##############

        - name: Check if Virtualbox is installed
          shell: which virtualbox >/dev/null 2>&1
          failed_when: false
          register: virtualbox_installed
          tags: VBox

        - name: Import GPG keys
          apt_key:
            url: "{{ item }}"
            state: present
          with_items:
            - https://www.virtualbox.org/download/oracle_vbox_2016.asc
            - https://www.virtualbox.org/download/oracle_vbox.asc
          when: virtualbox_installed.rc != 0
          tags: VBox

        - name: Add Virtualbox Repository
          apt_repository:
            repo: deb [arch=amd64] http://download.virtualbox.org/virtualbox/debian bionic contrib
          when: virtualbox_installed.rc != 0
          tags: VBox

        - name: Install Virtualbox
          apt:
            name: virtualbox-6.0
            update_cache: yes
          when: virtualbox_installed.rc != 0
          tags: VBox

      ##########
      #  QEMU  #
      ##########

        - name: Check to see if QEMU is installed
          shell: qemu-system-s390x --version >/dev/null 2>&1
          failed_when: false
          register: qemu_installed
          tags: QEMU

        - name: Add repos to APT
          apt_repository:
            repo: '{{ item }}'
            state: present
          with_items:
            - "deb [trusted=yes] http://ftp.uk.debian.org/debian sid main"
            - "deb [trusted=yes] http://ftp.uk.debian.org/debian experimental main"
          when: qemu_installed.rc != 0
          tags: QEMU

        - name: Install QEMU dependencies
          apt:
            name: "{{ packages }}"
            update_cache: yes
          vars:
            packages:
              - libfdt-dev
              - libglib2.0-dev
              - libguestfs-tools
              - libiscsi-dev
              - libnfs-dev
              - libpixman-1-dev
              - opensbi
              - qemu-efi-aarch64
              - qemu-utils
              - u-boot-qemu
              - zliblg-dev
          when: qemu_installed.rc != 0
          tags: QEMU

        - name: Extract source code
          unarchive:
            src: https://download.qemu.org/qemu-5.0.0.tar.xz
            dest: /tmp
            remote_src: yes
          retries: 3
          delay: 5
          register: qemu_download
          until: qemu_download is not failed
          when: qemu_installed.rc != 0
          tags: QEMU

        - name: Install QEMU
          shell: cd /tmp/qemu-5.0.0 && ./configure && make && make install
          when: qemu_installed.rc != 0
          tags: QEMU
