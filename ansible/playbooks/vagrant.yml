---
########################################
# AdoptOpenJDK - Ansible Playbook for: #
#  ------------- Vagrant --------------#
########################################

- name: Vagrant playbook
  hosts: all
  gather_facts: yes
  remote_user: root
  become: yes
  vars:
    # Jenkins User Variables:
    Jenkins_Username: jenkins
    # Jenkins_User_SSHKey: "Update This With Jenkins User SSH Key"

  tasks:
    - name: Vagrant playbook
      block:
        - name: Print facts
          debug:
            msg:
              - "inventory_hostname: {{ inventory_hostname | default('***Undefined***') }} "
              - "ansible_hostname: {{ ansible_hostname | default('***Undefined***') }}"
              - "ansible_fqdn: {{ ansible_fqdn | default('***Undefined***') }}"
              - "ansible_user: {{ ansible_user | default('***Undefined***') }}"
              - "ansible_default_ipv4.address: {{ ansible_default_ipv4.address | default('***Undefined***') }}"
              - "ansible_os_family: {{ ansible_os_family | default('***Undefined***') }} "
              - "ansible_distribution: {{ ansible_distribution | default('***Undefined***') }} "
              - "ansible_distribution_major_version: {{ ansible_distribution_major_version | default('***Undefined***') }} "
              - "ansible_architecture: {{ ansible_architecture | default('***Undefined***') }} "
              - "ansible_processor_vcpus: {{ ansible_processor_vcpus | default('***Undefined***') }} "
              - "ansible_processor_cores: {{ ansible_processor_cores | default('***Undefined***') }} "

        - name: Install pre-reqs
          apt:
            name: "{{ packages }}"
            update_cache: yes
          vars:
            packages:
              - software-properties-common
              - tree
              - zlib1g
              - zlib1g-dev
              - python3-pip
              - python-is-python3
              - build-essential
              - gettext
              - libcurl4-openssl-dev
              - sshpass
              # Pre-Reqs For Vbox
              - libssl-dev
              - libvpx-dev
              - libsdl-ttf2.0-0
              - evince

        - name: Run apt-get upgrade
          apt: upgrade=safe update_cache=yes
          tags: patch_update


        - name: Pip install winrm modules
          pip:
            executable: /usr/bin/pip
            name: ["requests-credssp", "pywinrm"]

        - name: Create tmp folder if necessary
          file:
            path: /tmp
            state: directory

        - name: Create /usr/lib/jvm if necessary
          file:
            path: /usr/lib/jvm
            state: directory

      ##########
      # Java 8 #
      ##########

        - name: Check if jdk8 is already installed in the target location
          shell: ls -ld /usr/lib/jvm/jdk8* >/dev/null 2>&1
          failed_when: false
          register: adoptopenjdk_installed
          tags: java

        - name: Check if there is a default java
          shell: java -version >/dev/null 2>&1
          failed_when: false
          register: default_java
          tags: java

        - name: Install latest jdk8 release if not already installed
          unarchive:
            src: https://api.adoptopenjdk.net/v3/binary/latest/8/ga/linux/x64/jdk/hotspot/normal/adoptopenjdk?project=jdk
            dest: /usr/lib/jvm
            remote_src: yes
          when:
            - adoptopenjdk_installed.rc != 0
          tags: java

        # This is due to ansible not liking wildcard searches in the file module :(
        - name: Find jdk8 folder in /usr/lib/jvm
          find:
            paths: /usr/lib/jvm
            file_type: directory
            contains: jdk8u*
          register: jdk8_folder
          when: default_java.rc != 0
          tags: java
        # There should only be one jdk8u* folder in /usr/lib/jvm, hence 'files[0]'
        - name: Make jdk8 the default java
          file:
            src: "{{ jdk8_folder.files[0].path }}{{ item }}"
            dest: /usr{{ item }}
            state: link
          with_items:
            - /bin/java
            - /bin/javac
          when: default_java.rc != 0
          tags: java

      ###########
      # Java 21 #
      ###########

        - name: Check if jdk-21 is already installed in the target location
          shell: ls -ld /usr/lib/jvm/jdk-21 >/dev/null 2>&1
          failed_when: false
          register: jdk21_installed
          changed_when: false
          tags: java

        - name: Download the Latest JDK21 OpenJDK tar.gz file via the API
          get_url:
            url: "https://api.adoptium.net/v3/binary/latest/21/ga/linux/x64/jdk/hotspot/normal/eclipse?project=jdk"
            dest: "/tmp/JDK21.tar.gz"
          when: jdk21_installed.rc != 0
          tags: java

        - name: Install JDK21 if one not already installed
          unarchive:
            src: /tmp/JDK21.tar.gz
            dest: /usr/lib/jvm
            remote_src: yes
          when: jdk21_installed.rc != 0
          tags: java

        - name: Remove Download JDK
          file:
            path: /tmp/JDK21.tar.gz
            state: absent
          when: jdk21_installed.rc != 0
          tags: java

      ###########
      # Ansible #
      ###########

        - name: Check if Ansible is installed
          shell: which ansible >/dev/null 2>&1
          failed_when: false
          register: ansible_installed
          tags: ansible

        - name: Add Ansible repository
          apt_repository:
            repo: ppa:ansible/ansible
          when: ansible_installed.rc != 0
          tags: ansible

        - name: Install Ansible
          apt:
            name: ansible
            update_cache: yes
          when: ansible_installed.rc != 0
          tags: ansible

      #######
      # Git #
      #######

        - name: Check if Git is installed
          shell: git --version >/dev/null 2>&1
          failed_when: false
          register: git_installed
          tags:
            - skip_ansible_lint
            - git

        - name: Test if Git is installed at the correct version
          shell: git --version | sed -e 's/git version //g' | awk -F'[.]' '{print $1 "." $2}'
          when: git_installed.rc == 0
          register: git_version
          tags:
            - skip_ansible_lint
            - git

        - name: Download Git Source
          get_url:
            url: https://www.kernel.org/pub/software/scm/git/git-2.15.0.tar.xz
            dest: /tmp/git-2.15.0.tar.xz
            mode: 0440
            checksum: sha256:107116489f10b758b51af1c5dbdb9a274917b0fb67dc8eaefcdabc7bc3eb3e6a
          when:
            - (git_installed.rc != 0 ) or (git_installed.rc == 0 and git_version.stdout is version_compare('2.15', operator='lt'))
          tags: git

        - name: Extract Git Source
          unarchive:
            src: /tmp/git-2.15.0.tar.xz
            dest: /tmp/
            copy: False
          when:
            - (git_installed.rc != 0 ) or (git_installed.rc == 0 and git_version.stdout is version_compare('2.15', operator='lt'))
          tags: git

        - name: Compile and Install Git from Source
          shell: cd /tmp/git-2.15.0 && ./configure --prefix=/usr/local --without-tcltk && make clean && make -j {{ ansible_processor_vcpus }} && sudo make install
          become: yes
          when:
            - (git_installed.rc != 0 ) or (git_installed.rc == 0 and git_version.stdout is version_compare('2.15', operator='lt'))
          tags: git

        - name: Remove system git if needed
          apt:
            name: git
            state: absent
          when:
            - (git_installed.rc == 0 and git_version.stdout is version_compare('2.15', operator='lt'))
          tags: git

        - name: Symlink git to /usr/bin/git
          file:
            src: /tmp/git-2.15.0/git
            dest: /usr/bin/git
            state: link
          when:
            - (git_installed.rc != 0 ) or (git_installed.rc == 0 and git_version.stdout is version_compare('2.15', operator='lt'))
          tags: git

      ###########
      # Vagrant #
      ###########

        - name: Check if Vagrant is installed
          shell: which vagrant >/dev/null 2>&1
          failed_when: false
          register: vagrant_installed
          tags: vagrant

        - name: Test if the Vagrant version is >2.1
          shell: vagrant --version | sed -e 's/Vagrant //g' | awk -F'[.]' '{print $1 "." $2 "." $3}'
          when: vagrant_installed.rc == 0
          register: vagrant_version
          tags: vagrant

        - name: Download and add the HashiCorp GPG key
          ansible.builtin.get_url:
            url: https://apt.releases.hashicorp.com/gpg
            dest: /tmp/hashicorp.gpg
          when:
            - (vagrant_installed.rc != 0) or (vagrant_installed.rc == 0 and vagrant_version.stdout is version_compare('2.2.19', operator='lt'))
          tags: vagrant

        - name: Add the HashiCorp GPG key to the keyring
          ansible.builtin.command:
            cmd: gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg /tmp/hashicorp.gpg
            creates: /usr/share/keyrings/hashicorp-archive-keyring.gpg
          when:
            - (vagrant_installed.rc != 0) or (vagrant_installed.rc == 0 and vagrant_version.stdout is version_compare('2.2.19', operator='lt'))
          tags: vagrant

        - name: Add the HashiCorp repository
          ansible.builtin.command:
            cmd: echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" | tee /etc/apt/sources.list.d/hashicorp.list
            creates: /etc/apt/sources.list.d/hashicorp.list
          when:
            - (vagrant_installed.rc != 0) or (vagrant_installed.rc == 0 and vagrant_version.stdout is version_compare('2.2.19', operator='lt'))
          tags: vagrant

        - name: Update apt package index
          ansible.builtin.apt:
            update_cache: yes

        - name: Install Vagrant
          ansible.builtin.apt:
            name: vagrant
            state: present
          when:
            - (vagrant_installed.rc != 0) or (vagrant_installed.rc == 0 and vagrant_version.stdout is version_compare('2.2.19', operator='lt'))
          tags: vagrant

        - name: Install Vagrant Plugins For WinRM
          ansible.builtin.apt:
            name: vagrant
            state: present
          when:
            - (vagrant_installed.rc != 0) or (vagrant_installed.rc == 0 and vagrant_version.stdout is version_compare('2.2.19', operator='lt'))
          tags: vagrant

      ##############
      # VirtualBox #
      ##############
        - name: Update apt cache
          apt:
            update_cache: yes

        - name: Check if Virtualbox is installed
          shell: which virtualbox >/dev/null 2>&1
          failed_when: false
          register: virtualbox_installed
          tags: VBox

        - name: Import GPG keys
          apt_key:
            url: "{{ item }}"
            state: present
          with_items:
            - https://www.virtualbox.org/download/oracle_vbox_2016.asc
            - https://www.virtualbox.org/download/oracle_vbox.asc
          when: virtualbox_installed.rc != 0
          tags: VBox

        - name: Add Virtualbox Repository
          apt_repository:
            repo: deb [arch=amd64] http://download.virtualbox.org/virtualbox/debian bionic contrib
          when: virtualbox_installed.rc != 0
          tags: VBox

        - name: Update apt cache Again
          apt:
            update_cache: yes
          when: virtualbox_installed.rc != 0

        - name: Install linux headers and dkms
          apt:
            name:
              - "linux-headers-{{ ansible_kernel }}"
              - dkms
            state: present
          when: virtualbox_installed.rc != 0
          tags: VBox

        - name: Install VirtualBox
          apt:
            name: "virtualbox"
            state: present
          when: virtualbox_installed.rc != 0
          tags: VBox

      ##########
      #  QEMU  #
      ##########

        - name: Install QEMU Packages
          apt:
            name: "{{ packages }}"
            state: present
            update_cache: yes
          vars:
            packages:
              - qemu-kvm
              - virt-manager
              - virtinst
              - libvirt-clients
              - bridge-utils
              - libvirt-daemon-system
              - qemu-system-x86
              - qemu-system-s390x
              - qemu-system-ppc
              - qemu-system-arm
              - qemu-system-misc
          tags: QEMU

        ################
        # Jenkins_User #
        ################
        - name: Set Home Folder for Jenkins user
          set_fact:
            home_folder: /home/{{ Jenkins_Username }}
          tags: jenkins_user

        - name: Create Jenkins user
          action: user name={{ Jenkins_Username }} state=present home={{ home_folder }} shell=/bin/bash
          failed_when: false
          tags: jenkins_user

        - name: Create Jenkins SSH Folder
          file:
            path: "{{ home_folder }}/.ssh"
            state: directory
            owner: "{{ Jenkins_Username }}"
            group: "{{ Jenkins_Username }}"
            mode: '0700'
          tags: jenkins_user

        - name: Add github.com to known_hosts
          known_hosts:
            name: github.com
            key: github.com ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ==
            path: "{{ home_folder }}/.ssh/known_hosts"
            state: present
          tags: jenkins_user

        - name: Change ownership of jenkins' ~/.ssh/known_hosts
          file:
            path: "{{ home_folder }}/.ssh/known_hosts"
            owner: "{{ Jenkins_Username }}"
            mode: 0644
          tags: jenkins_user

        - name: Add Jenkins user to the audio group
          user: name={{ Jenkins_Username }}
            groups=audio
            append=yes
          tags: jenkins_user

        - name: Set authorized key for Jenkins user
          authorized_key:
            user: "{{ Jenkins_Username }}"
            state: present
            key: "{{ Jenkins_User_SSHKey }}"
          tags: jenkins_user

        - name: Pip install winrm modules
          pip:
            executable: /usr/bin/pip
            name: ["requests-credssp", "pywinrm"]
          become: yes
          become_user: "{{ Jenkins_Username }}"
          tags: jenkins_user

        ####################################
        # Vagrant Plugins For Jenkins User #
        ####################################
        ## Vagrant Plugins Are User Specific, So Install As Jenkins User

        - name: Install Vagrant plugin winrm
          command: vagrant plugin install winrm
          register: winrm_installed
          changed_when: "'installed' in winrm_installed.stdout"
          failed_when: winrm_installed.rc != 0 and "'already installed' not in winrm_installed.stdout"
          ignore_errors: yes
          become: yes
          become_user: "{{ Jenkins_Username }}"

        - name: Install Vagrant plugin winrmfs
          command: vagrant plugin install winrm-fs
          register: winrmfs_installed
          changed_when: "'installed' in winrmfs_installed.stdout"
          failed_when: winrmfs_installed.rc != 0 and "'already installed' not in winrmfs_installed.stdout"
          ignore_errors: yes
          become: yes
          become_user: "{{ Jenkins_Username }}"

        - name: Install Vagrant plugin winrm-elevated
          command: vagrant plugin install winrm-elevated
          register: winrmelevate_installed
          changed_when: "'installed' in winrmelevate_installed.stdout"
          failed_when: winrmelevate_installed.rc != 0 and "'already installed' not in winrmelevate_installed.stdout"
          ignore_errors: yes
          become: yes
          become_user: "{{ Jenkins_Username }}"

        - name: Install Vagrant plugin vagrant-disksize
          command: vagrant plugin install vagrant-disksize
          register: disksize_installed
          changed_when: "'installed' in disksize_installed.stdout"
          failed_when: disksize_installed.rc != 0 and "'already installed' not in disksize_installed.stdout"
          ignore_errors: yes
          become: yes
          become_user: "{{ Jenkins_Username }}"

        - name: Ensure all plugins are installed
          fail:
            msg: "Failed to install Vagrant plugins"
          when: winrm_installed.failed or winrmfs_installed.failed or winrmelevate_installed.failed or disksize_installed.failed

        - name: Output installation results
          debug:
            msg: >
              winrm plugin installation: {{ winrm_installed.stdout }}
              winrmfs plugin installation: {{ winrmfs_installed.stdout }}
              winrm-elevated plugin installation: {{ winrmelevate_installed.stdout }}
              vagrant-disksize plugin installation: {{ disksize_installed.stdout }}
